// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  provider Provider
  // role Role
  streams  Stream[] @relation("user")
  added    Stream[] @relation("addedby")
  upvote   Upvote[]
}

model Stream {
  id            String         @id @default(uuid())
  type          StreamType
  url           String
  extractedId   String
  played        Boolean        @default(false)
  playedTS      DateTime?       
  createdAt     DateTime       @default(now())
  title         String         @default("")
  smallImg      String         @default("")
  bigImg        String         @default("")
  active        Boolean        @default(true)
  userId        String
  addedById     String
  addedby       User           @relation(fields:[addedById],references:[id],name:"addedby")
  user          User           @relation(fields: [userId], references: [id],name:"user")
  upvote        Upvote[]
  CurrentStream CurrentStream?
}

model CurrentStream {
  // id       String  @id @default(uuid())
  userId   String @id
  streamId String? @unique
  stream   Stream? @relation(fields: [streamId], references: [id])
}

model Upvote {
  id       String @id @default(uuid())
  userId   String
  streamId String
  user     User   @relation(fields: [userId], references: [id])
  stream   Stream @relation(fields: [streamId], references: [id],onDelete:Cascade)
  @@unique([userId, streamId])
}

enum StreamType {
  Spotify
  Youtube
}

enum Role {
  Streamer
  EndUser
}

enum Provider {
  Google
}
